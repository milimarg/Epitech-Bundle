#!/usr/bin/env python3

from parsing import get_parsing
from calc_derivative import calc_simple_derivative


def derivate(values, i):
    forward = calc_simple_derivative(values[i - 1][0], values[i - 1][1], values[i][0], values[i][1])
    backward = calc_simple_derivative(values[i][0], values[i][1], values[i + 1][0], values[i + 1][1])
    derivate_result = (forward * (values[i + 1][0] - values[i][0]) + backward * (values[i][0] - values[i - 1][0])) / (values[i + 1][0] - values[i - 1][0])
    return derivate_result


values = get_parsing()

a = []
equivalence = 0
start_second_derivative_estimated = 0
end_second_derivative_estimated = 0

print("Derivative:")
for i in range(len(values)):
    if 0 < i < len(values) - 1:
        child = []
        result = derivate(values, i)
        child.append(values[i][0])
        child.append(result)
        print(f"{values[i][0]} ml -> {result:.2f}")
        a.append(child)

for i in range(len(a) - 1):
    if a[i + 1][1] < a[i][1] and i > 1:
        equivalence = a[i][0]
        start_second_derivative_estimated = a[i - 1][0]
        end_second_derivative_estimated = a[i + 1][0]
        break

print(f"\nEquivalence point at {equivalence} ml\n")

print("Second derivative:")
for i in range(len(a)):
    if 0 < i < len(a) - 1:
        result = derivate(a, i)
        print(f"{a[i][0]} ml -> {result:.2f}")

print("\nSecond derivative estimated:")
i = start_second_derivative_estimated
result = 0
while i < end_second_derivative_estimated:
    print(f"{i:.1f} ml -> {result}")
    i += 0.1
